using FS.TimeTracking.Abstractions.Interfaces.Repository.Services;
using FS.TimeTracking.Repository.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System.Linq;

namespace FS.TimeTracking.Repository.Services;

/// <inheritdoc />
public class DatabaseMigrationService : IDatabaseMigrationService
{
    private readonly ILogger<TimeTrackingDbContext> _logger;
    private readonly TimeTrackingDbContext _dbContext;
    private readonly ITruncateDbService _truncateDbService;

    /// <summary>
    /// Initializes a new instance of the <see cref="DatabaseMigrationService"/> class.
    /// </summary>
    /// <param name="logger">The logger</param>
    /// <param name="dbContext">The DB context</param>
    /// <param name="truncateDbService">The truncate service</param>
    /// <autogeneratedoc />
    public DatabaseMigrationService(ILogger<TimeTrackingDbContext> logger, TimeTrackingDbContext dbContext, ITruncateDbService truncateDbService)
    {
        _logger = logger;
        _dbContext = dbContext;
        _truncateDbService = truncateDbService;
    }

    /// <inheritdoc />
    public void MigrateDatabase(bool truncateDatabase)
    {
        if (truncateDatabase)
            _truncateDbService.TruncateDatabase();

        var pendingMigrations = _dbContext.Database.GetPendingMigrations().ToList();
        if (pendingMigrations.Count == 0)
            return;

        _logger.LogInformation("Apply migrations to database. Please be patient ...");
        foreach (var pendingMigration in pendingMigrations)
            _logger.LogInformation(pendingMigration);

        _dbContext.Database.Migrate();

        _logger.LogInformation("Database migration finished.");
    }
}
using FS.FilterExpressionCreator.Abstractions.Extensions;
using FS.FilterExpressionCreator.Abstractions.Models;
using FS.FilterExpressionCreator.Filters;
using FS.TimeTracking.Abstractions.DTOs.Chart;
using FS.TimeTracking.Abstractions.DTOs.MasterData;
using FS.TimeTracking.Abstractions.DTOs.TimeTracking;
using FS.TimeTracking.Abstractions.Extensions;
using FS.TimeTracking.Abstractions.Interfaces.Application.Services.Chart;
using FS.TimeTracking.Abstractions.Interfaces.Application.Services.MasterData;
using FS.TimeTracking.Abstractions.Interfaces.Application.Services.Shared;
using FS.TimeTracking.Abstractions.Interfaces.Repository.Services;
using FS.TimeTracking.Abstractions.Models.Application.Chart;
using FS.TimeTracking.Abstractions.Models.Application.MasterData;
using FS.TimeTracking.Shared.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services.Chart;

/// <inheritdoc />
public class OrderChartService : IOrderChartService
{
    private readonly IWorkdayService _workdayService;
    private readonly ISettingService _settingService;
    private readonly IRepository _repository;

    /// <summary>
    /// Initializes a new instance of the <see cref="OrderChartService"/> class.
    /// </summary>
    /// <param name="workdayService">The workday service.</param>
    /// <param name="settingService">The setting service.</param>
    /// <param name="repository">The repository.</param>
    /// <autogeneratedoc />
    public OrderChartService(IWorkdayService workdayService, ISettingService settingService, IRepository repository)
    {
        _workdayService = workdayService;
        _settingService = settingService;
        _repository = repository;
    }

    /// <inheritdoc />
    public async Task<List<OrderWorkTimeDto>> GetWorkTimesPerOrder(EntityFilter<TimeSheetDto> timeSheetFilter, EntityFilter<ProjectDto> projectFilter, EntityFilter<CustomerDto> customerFilter, EntityFilter<ActivityDto> activityFilter, EntityFilter<OrderDto> orderFilter, EntityFilter<HolidayDto> holidayFilter, CancellationToken cancellationToken = default)
    {
        var settings = await _settingService.GetSettings(cancellationToken);
        var filter = ChartFilter.Create(timeSheetFilter, projectFilter, customerFilter, activityFilter, orderFilter, holidayFilter);
        var workedTimesPerOrder = await GetWorkedTimesPerOrder(filter, cancellationToken);
        var plannedTimesPerOrder = await GetPlannedTimesPerOrder(filter, cancellationToken);

        var totalWorkedDays = workedTimesPerOrder.Sum(x => x.WorkedDays);
        var totalPlannedDays = plannedTimesPerOrder.Sum(x => x.PlannedDays);

        return workedTimesPerOrder
            .CrossJoin(
                plannedTimesPerOrder,
                worked => worked.OrderId,
                planned => planned.OrderId,
                (worked, planned) =>
                {
                    if (worked == null && planned == null)
                        throw new InvalidOperationException("Planned and worked entities are null");

                    var plannedTimeSpan = planned != null ? new Section<DateTimeOffset>(planned.PlannedStart, planned.PlannedEnd) : null;
                    return new OrderWorkTimeDto
                    {
                        OrderId = worked?.OrderId ?? planned.OrderId,
                        OrderTitle = worked?.OrderTitle ?? planned?.OrderTitle,
                        OrderNumber = worked?.OrderNumber ?? planned?.OrderNumber,
                        CustomerTitle = worked?.CustomerTitle ?? planned?.CustomerTitle,
                        TimeWorked = worked?.WorkedTime ?? TimeSpan.Zero,
                        DaysWorked = worked?.WorkedDays ?? 0,
                        RatioTotalWorked = totalWorkedDays != 0 ? (worked?.WorkedDays ?? 0) / totalWorkedDays : 0,
                        BudgetWorked = worked?.WorkedBudget ?? 0,
                        TimePlanned = planned?.PlannedTime,
                        DaysPlanned = planned?.PlannedDays,
                        RatioTotalPlanned = totalPlannedDays != 0 ? (planned?.PlannedDays ?? 0) / totalPlannedDays : null,
                        BudgetPlanned = planned?.PlannedBudget,
                        PlannedStart = planned?.PlannedStart,
                        PlannedEnd = planned?.PlannedEnd,
                        PlannedIsPartial = plannedTimeSpan != null && !filter.SelectedPeriod.Contains(plannedTimeSpan),
                        PlannedHourlyRate = planned?.HourlyRate,
                        Currency = settings.Currency,
                    };
                })
            .OrderBy(x => x.PlannedStart)
            .ThenBy(x => x.CustomerTitle)
            .ThenBy(x => x.OrderNumber)
            .ToList();
    }

    /// <inheritdoc />
    public async Task<List<OrderWorkTime>> GetWorkedTimesPerOrder(ChartFilter filter, CancellationToken cancellationToken)
    {
        var settings = await _settingService.GetSettings(cancellationToken);

        var workedTimesPerOrder = await _repository
            .GetGrouped(
                groupBy: x => new { x.OrderId, x.Order.Title, x.Order.Number },
                select: x => new OrderWorkTime
                {
                    OrderId = x.Key.OrderId.Value,
                    OrderTitle = x.Key.Title,
                    OrderNumber = x.Key.Number,
                    WorkedTime = TimeSpan.FromSeconds(x.Sum(f => (double)f.StartDateLocal.DiffSeconds(f.StartDateOffset, f.EndDateLocal))),
                    HourlyRate = x.FirstOrDefault().Order.HourlyRate,
                    CustomerId = x.FirstOrDefault().Project.Customer.Id,
                    CustomerTitle = x.FirstOrDefault().Project.Customer.Title,
                },
                where: new[] { filter.WorkedTimes.CreateFilter(), x => x.OrderId != null }.CombineWithConditionalAnd(),
                cancellationToken: cancellationToken
            );

        foreach (var workTime in workedTimesPerOrder)
            workTime.WorkedDays = workTime.WorkedTime.TotalHours / settings.WorkHoursPerWorkday.TotalHours;

        return workedTimesPerOrder;
    }

    /// <inheritdoc />
    public async Task<List<OrderWorkTime>> GetPlannedTimesPerOrder(ChartFilter filter, CancellationToken cancellationToken)
    {
        var settings = await _settingService.GetSettings(cancellationToken);

        var orders = await _repository
            .Get(
                select: (Order x) => x,
                where: filter.PlannedTimes,
                includes: new[] { nameof(Order.Customer) },
                cancellationToken: cancellationToken
            );

        var plannedTimesPerOrder = await orders
            .SelectAsync(async order =>
            {
                var plannedTime = await GetPlannedTimeForPeriod(order, filter.SelectedPeriod);
                return new OrderWorkTime
                {
                    OrderId = order.Id,
                    OrderTitle = order.Title,
                    OrderNumber = order.Number,
                    CustomerId = order.CustomerId,
                    CustomerTitle = order.Customer.Title,
                    PlannedTime = plannedTime,
                    PlannedDays = plannedTime.TotalHours / settings.WorkHoursPerWorkday.TotalHours,
                    HourlyRate = order.HourlyRate,
                    PlannedStart = order.StartDate,
                    PlannedEnd = order.DueDate,
                };
            })
            .ToListAsync();

        return plannedTimesPerOrder;
    }

    private async Task<TimeSpan> GetPlannedTimeForPeriod(Order order, Section<DateTimeOffset> selectedPeriod)
    {
        var orderPeriod = new Section<DateTimeOffset>(order.StartDate, order.DueDate.AddDays(1));
        var orderWorkdays = await _workdayService.GetWorkdays(orderPeriod);
        var orderWorkHours = order.HourlyRate != 0 ? order.Budget / order.HourlyRate : 0;

        var planningPeriod = orderPeriod.Intersection(selectedPeriod);
        var plannedWorkDays = await _workdayService.GetWorkdays(planningPeriod) ?? orderWorkdays;

        var ratio = orderWorkdays.PersonalWorkdays.Count != 0
            ? plannedWorkDays.PersonalWorkdays.Count / (double)orderWorkdays.PersonalWorkdays.Count
            : 1;
        return TimeSpan.FromHours(orderWorkHours * ratio);
    }
}
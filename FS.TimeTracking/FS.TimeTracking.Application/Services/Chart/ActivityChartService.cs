using FS.TimeTracking.Abstractions.DTOs.Chart;
using FS.TimeTracking.Core.Extensions;
using FS.TimeTracking.Core.Interfaces.Application.Services.Chart;
using FS.TimeTracking.Core.Interfaces.Application.Services.MasterData;
using FS.TimeTracking.Core.Interfaces.Repository.Services;
using FS.TimeTracking.Core.Models.Application.Chart;
using FS.TimeTracking.Core.Models.Filter;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services.Chart;

/// <inheritdoc />
public class ActivityChartService : IActivityChartService
{
    private readonly ISettingService _settingService;
    private readonly IDbRepository _dbRepository;

    /// <summary>
    /// Initializes a new instance of the <see cref="ActivityChartService" /> class.
    /// </summary>
    /// <param name="settingService">The setting service.</param>
    /// <param name="dbRepository">The repository.</param>
    /// <autogeneratedoc />
    public ActivityChartService(ISettingService settingService, IDbRepository dbRepository)
    {
        _settingService = settingService;
        _dbRepository = dbRepository;
    }

    /// <inheritdoc />
    public async Task<List<ActivityWorkTimeDto>> GetWorkTimesPerActivity(TimeSheetFilterSet filters, CancellationToken cancellationToken = default)
    {
        var settings = await _settingService.GetSettings(cancellationToken);
        var filter = ChartFilter.Create(filters);
        var workedTimesPerActivity = await GetWorkedTimesPerActivity(filter, cancellationToken);

        var totalWorkedDays = workedTimesPerActivity.Sum(x => x.WorkedDays);

        var result = workedTimesPerActivity
            .Select(worked => new ActivityWorkTimeDto
            {
                ActivityId = worked.ActivityId,
                ActivityTitle = worked.ActivityTitle,
                ActivityHidden = worked.ActivityHidden,
                TimeWorked = worked.WorkedTime,
                DaysWorked = worked.WorkedDays,
                TotalWorkedPercentage = totalWorkedDays != 0 ? worked.WorkedDays / totalWorkedDays : 0,
                BudgetWorked = worked.WorkedBudget,
                Currency = settings.Company.Currency,
            })
            .OrderBy(x => x.ActivityTitle)
            .ToList();

        return result;
    }

    private async Task<List<ActivityWorkTime>> GetWorkedTimesPerActivity(ChartFilter filter, CancellationToken cancellationToken)
    {
        var settings = await _settingService.GetSettings(cancellationToken);

        var timeSheetsPerActivityAndOrder = await _dbRepository
            .GetGrouped(
                groupBy: timeSheet => new { timeSheet.Activity.Id, timeSheet.Activity.Title, timeSheet.Activity.Hidden, timeSheet.OrderId },
                select: timeSheets => new
                {
                    ActivityId = timeSheets.Key.Id,
                    ActivityTitle = timeSheets.Key.Title,
                    ActivityHidden = timeSheets.Key.Hidden,
                    WorkedTime = TimeSpan.FromSeconds(timeSheets.Sum(f => (double)f.StartDateLocal.DiffSeconds(f.StartDateOffset, f.EndDateLocal, f.EndDateOffset))),
                    HourlyRate = timeSheets.Key.OrderId != null
                        ? timeSheets.Min(t => t.Order.HourlyRate)
                        : timeSheets.Min(t => t.Customer.HourlyRate),
                },
                where: filter.WorkedTimes.CreateFilter(),
                cancellationToken: cancellationToken
            );

        var workedTimesPerActivity = timeSheetsPerActivityAndOrder
            .GroupBy(timeSheet => new { timeSheet.ActivityId, timeSheet.ActivityTitle, timeSheet.ActivityHidden })
            .Select(timeSheets => new ActivityWorkTime
            {
                ActivityId = timeSheets.Key.ActivityId,
                ActivityTitle = timeSheets.Key.ActivityTitle,
                ActivityHidden = timeSheets.Key.ActivityHidden,
                WorkedTime = timeSheets.Sum(h => h.WorkedTime),
                WorkedBudget = timeSheets.Select(f => f.WorkedTime.TotalHours * f.HourlyRate).Sum(),
            })
            .ToList();

        foreach (var workTime in workedTimesPerActivity)
            workTime.WorkedDays = workTime.WorkedTime.TotalHours / settings.WorkHoursPerWorkday.TotalHours;

        return workedTimesPerActivity;
    }
}
using FS.FilterExpressionCreator.Filters;
using FS.TimeTracking.Abstractions.DTOs.MasterData;
using FS.TimeTracking.Abstractions.DTOs.TimeTracking;
using FS.TimeTracking.Abstractions.Extensions;
using FS.TimeTracking.Abstractions.Interfaces.Application.Services.MasterData;
using FS.TimeTracking.Abstractions.Interfaces.Application.Services.Report;
using FS.TimeTracking.Abstractions.Interfaces.Repository.Services;
using FS.TimeTracking.Abstractions.Models.Application.TimeTracking;
using FS.TimeTracking.Abstractions.Models.Configuration;
using FS.TimeTracking.Application.AutoMapper;
using FS.TimeTracking.Shared.DTOs.Report;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services.Report;

/// <inheritdoc />
public class TimeSheetReportService : ITimeSheetReportService
{
    private readonly ISettingService _settingService;
    private readonly IRepository _repository;

    /// <summary>
    /// Initializes a new instance of the <see cref="TimeSheetReportService"/> class.
    /// </summary>
    /// <param name="settingService">The setting service.</param>
    /// <param name="repository">The repository.</param>
    /// <autogeneratedoc />
    public TimeSheetReportService(ISettingService settingService, IRepository repository)
    {
        _settingService = settingService;
        _repository = repository;
    }

    /// <inheritdoc />
    public async Task<TimeSheetReportDto> GetFullTimeSheetReport(EntityFilter<TimeSheetDto> timeSheetFilter, EntityFilter<ProjectDto> projectFilter, EntityFilter<CustomerDto> customerFilter, EntityFilter<ActivityDto> activityFilter, EntityFilter<OrderDto> orderFilter, EntityFilter<HolidayDto> holidayFilter, string language, CancellationToken cancellationToken = default)
    {
        var reportFolder = Path.Combine(TimeTrackingConfiguration.ExecutablePath, TimeTrackingConfiguration.REPORT_FOLDER);
        var report = await File.ReadAllBytesAsync(Path.Combine(reportFolder, "TimeSheet.Full.mrt"), cancellationToken);
        var data = await GetTimeSheetReportData(timeSheetFilter, projectFilter, customerFilter, activityFilter, orderFilter, holidayFilter, language, cancellationToken);
        return new TimeSheetReportDto
        {
            Report = report,
            Data = data,
        };
    }

    /// <inheritdoc />
    public async Task<TimeSheetReportDataDto> GetTimeSheetReportData(EntityFilter<TimeSheetDto> timeSheetFilter, EntityFilter<ProjectDto> projectFilter, EntityFilter<CustomerDto> customerFilter, EntityFilter<ActivityDto> activityFilter, EntityFilter<OrderDto> orderFilter, EntityFilter<HolidayDto> holidayFilter, string language, CancellationToken cancellationToken = default)
    {
        var selectedPeriod = FilterExtensions.GetSelectedPeriod(timeSheetFilter);
        var parameters = new ReportParameter { StartDate = selectedPeriod.Start, EndDate = selectedPeriod.End };

        var provider = await GetProviderInformation(cancellationToken);

        var translations = await _settingService.GetTranslations(language, cancellationToken);
        var reportTranslations = translations
            .SelectToken("Page.Report.Timesheet")
            .ToDictionary()
            .ToDictionary(x => x.Key, x => x.Value.Trim('"'));

        var timeSheets = await GetTimeSheets(timeSheetFilter, projectFilter, customerFilter, activityFilter, orderFilter, holidayFilter, cancellationToken);

        return new TimeSheetReportDataDto
        {
            Parameters = parameters,
            Provider = provider,
            Translations = reportTranslations,
            TimeSheets = timeSheets,
        };
    }

    private async Task<ProviderDto> GetProviderInformation(CancellationToken cancellationToken)
    {
        var settings = await _settingService.GetSettings(cancellationToken);
        var provider = new ProviderDto
        {
            Name = settings.Company.Provider,
            Company = settings.Company.Company,
            Department = settings.Company.Department,
        };
        return provider;
    }

    private async Task<List<TimeSheetReportGridDto>> GetTimeSheets(EntityFilter<TimeSheetDto> timeSheetFilter, EntityFilter<ProjectDto> projectFilter, EntityFilter<CustomerDto> customerFilter, EntityFilter<ActivityDto> activityFilter, EntityFilter<OrderDto> orderFilter, EntityFilter<HolidayDto> holidayFilter, CancellationToken cancellationToken = default)
    {
        var filter = FilterExtensions.CreateTimeSheetFilter(timeSheetFilter, projectFilter, customerFilter, activityFilter, orderFilter, holidayFilter);

        return await _repository
            .Get<TimeSheet, TimeSheetReportGridDto>(
                where: filter,
                orderBy: o => o.OrderBy(x => x.StartDateLocal),
                cancellationToken: cancellationToken
            );
    }
}
using FS.TimeTracking.Core.Interfaces.Application.Services.Administration;
using FS.TimeTracking.Core.Interfaces.Application.Services.Shared;
using FS.TimeTracking.Core.Interfaces.Repository.Services.Database;
using FS.TimeTracking.Core.Models.Application.Administration;
using FS.TimeTracking.Core.Models.Application.MasterData;
using FS.TimeTracking.Core.Models.Application.TimeTracking;
using FS.TimeTracking.Core.Models.Filter;
using Newtonsoft.Json.Linq;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services.Administration;

/// <inheritdoc />
public class MaintenanceService : IMaintenanceApiService
{
    private readonly IDbRepository _dbRepository;
    private readonly IFilterFactory _filterFactory;

    /// <summary>
    /// Initializes a new instance of the <see cref="MaintenanceService"/> class.
    /// </summary>
    /// <param name="dbRepository">The database repository.</param>
    /// <param name="filterFactory">The filter factory.</param>
    /// <autogeneratedoc />
    public MaintenanceService(IDbRepository dbRepository, IFilterFactory filterFactory)
    {
        _dbRepository = dbRepository;
        _filterFactory = filterFactory;
    }

    /// <inheritdoc />
    public async Task<JObject> ExportData(TimeSheetFilterSet filters)
    {
        var holidayFilter = await _filterFactory.CreateHolidayFilter(filters);
        var customerFilter = await _filterFactory.CreateCustomerFilter(filters);
        var projectFilter = await _filterFactory.CreateProjectFilter(filters);
        var activityFilter = await _filterFactory.CreateActivityFilter(filters);
        var orderFilter = await _filterFactory.CreateOrderFilter(filters);
        var timeSheetFilter = await _filterFactory.CreateTimeSheetFilter(filters);

        var databaseModelHash = await _dbRepository.GetDatabaseModelHash();
        var settings = await _dbRepository.Get((Setting x) => x, orderBy: o => o.OrderBy(x => x.Key));
        var holidays = await _dbRepository.Get((Holiday x) => x, holidayFilter, orderBy: o => o.OrderBy(x => x.StartDateLocal).ThenBy(x => x.Title));
        var customers = await _dbRepository.Get((Customer x) => x, customerFilter, orderBy: o => o.OrderBy(x => x.Title));
        var projects = await _dbRepository.Get((Project x) => x, projectFilter, orderBy: o => o.OrderBy(x => x.Title));
        var activities = await _dbRepository.Get((Activity x) => x, activityFilter, orderBy: o => o.OrderBy(x => x.Title));
        var orders = await _dbRepository.Get((Order x) => x, orderFilter, orderBy: o => o.OrderBy(x => x.StartDateLocal).ThenBy(x => x.Title));
        var timeSheets = await _dbRepository.Get((TimeSheet x) => x, timeSheetFilter, orderBy: o => o.OrderBy(x => x.StartDateLocal));

        var export = new DatabaseExport
        {
            DatabaseModelHash = databaseModelHash,
            Settings = settings,
            Holidays = holidays,
            Customers = customers,
            Projects = projects,
            Activities = activities,
            Orders = orders,
            TimeSheets = timeSheets,
        };

        return JObject.FromObject(export);
    }

    /// <inheritdoc />
    public async Task ImportData(JObject databaseExport)
    {
        var import = databaseExport.ToObject<DatabaseExport>();

        await TruncateData();

        var currentModelHash = await _dbRepository.GetDatabaseModelHash();
        var importModelHash = import.DatabaseModelHash;
        if (!currentModelHash.Equals(importModelHash, StringComparison.OrdinalIgnoreCase))
            throw new InvalidOperationException("The database schema of data to import must match current database schema.");

        using var scope = _dbRepository.CreateTransactionScope();

        await _dbRepository.BulkAddRange(import.Settings);
        await _dbRepository.BulkAddRange(import.Holidays);
        await _dbRepository.BulkAddRange(import.Customers);
        await _dbRepository.BulkAddRange(import.Projects);
        await _dbRepository.BulkAddRange(import.Activities);
        await _dbRepository.BulkAddRange(import.Orders);
        await _dbRepository.BulkAddRange(import.TimeSheets);

        scope.Complete();
    }

    /// <inheritdoc />
    public async Task TruncateData()
    {
        using var scope = _dbRepository.CreateTransactionScope();

        await _dbRepository.BulkRemove<TimeSheet>();
        await _dbRepository.BulkRemove<Order>();
        await _dbRepository.BulkRemove<Activity>();
        await _dbRepository.BulkRemove<Project>();
        await _dbRepository.BulkRemove<Customer>();
        await _dbRepository.BulkRemove<Holiday>();
        await _dbRepository.BulkRemove<Setting>();

        scope.Complete();
    }
}
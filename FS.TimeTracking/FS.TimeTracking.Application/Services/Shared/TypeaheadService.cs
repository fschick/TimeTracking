using FS.TimeTracking.Shared.DTOs.TimeTracking;
using FS.TimeTracking.Shared.Interfaces.Application.Services.Shared;
using FS.TimeTracking.Shared.Interfaces.Repository.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using FS.TimeTracking.Shared.DTOs.Shared;
using FS.TimeTracking.Shared.Models.Application.MasterData;

namespace FS.TimeTracking.Application.Services.Shared;

/// <inheritdoc />
public class TypeaheadService : ITypeaheadService
{
    private readonly IRepository _repository;

    /// <summary>
    /// Initializes a new instance of the <see cref="TypeaheadService"/> class.
    /// </summary>
    /// <param name="repository">The repository.</param>
    /// <autogeneratedoc />
    public TypeaheadService(IRepository repository)
        => _repository = repository;

    /// <inheritdoc />
    public async Task<List<TypeaheadDto<string>>> GetCustomers(bool showHidden, CancellationToken cancellationToken = default)
        => await _repository
            .Get(
                select: (Customer x) => TypeaheadDto.Create(x.Id, x.Title, x.Hidden),
                where: x => showHidden || !x.Hidden,
                orderBy: o => o.OrderBy(x => x.Hidden).ThenBy(x => x.Title),
                cancellationToken: cancellationToken
            );

    /// <inheritdoc />
    public async Task<List<TypeaheadDto<string>>> GetProjects(bool showHidden, CancellationToken cancellationToken = default)
        => await _repository
            .Get(
                select: (Project x) => new TypeaheadDto<string>
                {
                    Id = x.Id,
                    Value = $"{x.Title} ({x.Customer.Title})",
                    Hidden = x.Hidden,
                    Extended = new { x.CustomerId }
                },
                where: x => showHidden || !x.Hidden,
                orderBy: o => o.OrderBy(x => x.Hidden).ThenBy(x => x.Title).ThenBy(x => x.Customer.Title),
                cancellationToken: cancellationToken
            );

    /// <inheritdoc />
    public async Task<List<TypeaheadDto<string>>> GetOrders(bool showHidden, CancellationToken cancellationToken = default)
        => await _repository
            .Get(
                select: (Order x) => new TypeaheadDto<string>
                {
                    Id = x.Id,
                    Value = x.Number != null ? $"{x.Title} ({x.Number})" : x.Title,
                    Hidden = x.Hidden,
                    Extended = new
                    {
                        IsActive = x.StartDateLocal.Date <= DateTime.UtcNow.Date && x.DueDateLocal >= DateTimeOffset.UtcNow.Date,
                        x.CustomerId
                    }
                },
                where: x => showHidden || !x.Hidden,
                orderBy: o => o.OrderBy(x => x.Hidden).ThenBy(x => x.Title),
                cancellationToken: cancellationToken
            );

    /// <inheritdoc />
    public async Task<List<TypeaheadDto<string>>> GetActivities(bool showHidden, CancellationToken cancellationToken = default)
        => await _repository
            .Get(
                select: (Activity x) => new TypeaheadDto<string>
                {
                    Id = x.Id,
                    Value = x.Project != null ? $"{x.Title} ({x.Project.Title})" : x.Title,
                    Hidden = x.Hidden,
                    Extended = new { x.ProjectId }
                },
                where: x => showHidden || !x.Hidden,
                orderBy: o => o.OrderBy(x => x.Hidden).ThenBy(x => x.Title),
                cancellationToken: cancellationToken
            );
}
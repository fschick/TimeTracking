using FS.TimeTracking.Core.Interfaces.Application.Services.Shared;
using FS.TimeTracking.Core.Models.Configuration;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;

namespace FS.TimeTracking.Application.Services.Shared;

/// <inheritdoc />
public class AuthorizationService : IAuthorizationService
{
    /// <summary>
    /// Default user ID taken when authorization feature is disabled.
    /// </summary>
    /// <autogeneratedoc />
    public static readonly Guid DefaultUserId = Guid.Empty;

    /// <summary>
    /// Default username taken when authorization feature is disabled.
    /// </summary>
    /// <autogeneratedoc />
    public static readonly string DefaultUsername = string.Empty;

    /// <inheritdoc />
    public ClaimsPrincipal CurrentUser { get; }

    /// <inheritdoc />
    public Guid CurrentUserId { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="AuthorizationService"/> class.
    /// </summary>
    /// <param name="httpContextAccessor">The HTTP context accessor.</param>
    /// <param name="configuration">The configuration.</param>
    /// <exception cref="ArgumentNullException">Thrown when one or more required arguments are null.</exception>
    /// <autogeneratedoc />
    public AuthorizationService(IHttpContextAccessor httpContextAccessor, IOptions<TimeTrackingConfiguration> configuration)
    {
        if (httpContextAccessor.HttpContext == null)
            throw new ArgumentNullException(nameof(httpContextAccessor.HttpContext));

        CurrentUser = configuration.Value.Features.Authorization
            ? httpContextAccessor.HttpContext.User
            : GetDefaultPrincipal();

        CurrentUserId = GetUserId(CurrentUser);
    }

    internal static ClaimsPrincipal GetDefaultPrincipal()
    {
        var claims = new List<Claim>()
        {
            new (ClaimTypes.NameIdentifier, DefaultUserId.ToString()),
            new (ClaimTypes.Name, DefaultUsername),
        };
        var identity = new ClaimsIdentity(claims);
        return new ClaimsPrincipal(identity);
    }

    /// <summary>
    /// Gets the identifier of the user.
    /// </summary>
    /// <exception cref="InvalidOperationException">Thrown when the user has no name identifier.</exception>
    /// <param name="principal">The principal to act on.</param>
    private static Guid GetUserId(ClaimsPrincipal principal)
    {
        var nameIdentifier = principal.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier);
        if (nameIdentifier == null)
            throw new InvalidOperationException("Principal has no name identifier.");
        return Guid.Parse(nameIdentifier.Value);
    }
}
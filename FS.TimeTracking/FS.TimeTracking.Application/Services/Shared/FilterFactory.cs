using FS.FilterExpressionCreator.Enums;
using FS.FilterExpressionCreator.Extensions;
using FS.FilterExpressionCreator.Filters;
using FS.TimeTracking.Abstractions.DTOs.Administration;
using FS.TimeTracking.Application.Extensions;
using FS.TimeTracking.Core.Constants;
using FS.TimeTracking.Core.Extensions;
using FS.TimeTracking.Core.Interfaces.Application.Services.Administration;
using FS.TimeTracking.Core.Interfaces.Application.Services.Shared;
using FS.TimeTracking.Core.Models.Application.Chart;
using FS.TimeTracking.Core.Models.Application.MasterData;
using FS.TimeTracking.Core.Models.Application.TimeTracking;
using FS.TimeTracking.Core.Models.Filter;
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services.Shared;

/// <inheritdoc />
public class FilterFactory : IFilterFactory
{
    private readonly IAuthorizationService _authorizationService;
    private readonly IUserService _userService;

    /// <summary>
    /// Initializes a new instance of the <see cref="FilterFactory"/> class.
    /// </summary>
    /// <param name="authorizationService">The authorization service.</param>
    /// <param name="userService">The user service.</param>
    /// <autogeneratedoc />
    public FilterFactory(IAuthorizationService authorizationService, IUserService userService)
    {
        _authorizationService = authorizationService;
        _userService = userService;
    }

    /// <inheritdoc />
    public Task<EntityFilter<Activity>> CreateActivityFilter(TimeSheetFilterSet filters)
    {
        var customerFilter = filters.CustomerFilter
            .Cast<Customer>()
            .Clear(x => x.Id);

        var projectFilter = filters.ProjectFilter
            .Cast<Project>()
            .Clear(x => x.Id);

        var filter = filters.ActivityFilter
            .Cast<Activity>()
            .Replace(x => x.CustomerId, filters.CustomerFilter.GetPropertyFilterSyntax(p => p.Id))
            .ReplaceNested(x => x.Customer, customerFilter)
            .Replace(x => x.ProjectId, filters.ProjectFilter.GetPropertyFilterSyntax(p => p.Id))
            .ReplaceNested(x => x.Project, projectFilter)
            .RestrictToCustomers(x => x.CustomerId, _authorizationService.RestrictToCustomerIds);

        return Task.FromResult(filter);
    }

    /// <inheritdoc />
    public Task<EntityFilter<Customer>> CreateCustomerFilter(TimeSheetFilterSet filters)
    {
        var filter = filters.CustomerFilter
            .Cast<Customer>()
            .RestrictToCustomers(x => x.Id, _authorizationService.RestrictToCustomerIds);

        return Task.FromResult(filter);
    }

    /// <inheritdoc />
    public Task<EntityFilter<Order>> CreateOrderFilter(TimeSheetFilterSet filters)
    {
        var customerProjectFilter = filters.CustomerFilter
            .Cast<Customer>()
            .Clear(x => x.Id)
            .ReplaceNested(x => x.Projects, filters.ProjectFilter.Cast<Project>());

        var filter = filters.OrderFilter
            .Cast<Order>()
            .Replace(x => x.CustomerId, filters.CustomerFilter.GetPropertyFilterSyntax(c => c.Id))
            .ReplaceNested(x => x.Customer, customerProjectFilter)
            .RestrictToCustomers(x => x.CustomerId, _authorizationService.RestrictToCustomerIds);

        return Task.FromResult(filter);
    }

    /// <inheritdoc />
    public Task<EntityFilter<Project>> CreateProjectFilter(TimeSheetFilterSet filters)
    {
        var customerFilter = filters.CustomerFilter
            .Cast<Customer>()
            .Clear(x => x.Id);

        var filter = filters.ProjectFilter
            .Cast<Project>()
            .Replace(x => x.CustomerId, filters.CustomerFilter.GetPropertyFilterSyntax(c => c.Id))
            .ReplaceNested(x => x.Customer, customerFilter)
            .RestrictToCustomers(x => x.CustomerId, _authorizationService.RestrictToCustomerIds);

        return Task.FromResult(filter);
    }

    /// <inheritdoc />
    public async Task<EntityFilter<TimeSheet>> CreateTimeSheetFilter(TimeSheetFilterSet filters)
    {
        var customerFilter = filters.CustomerFilter
            .Cast<Customer>()
            .Clear(x => x.Id);

        var activityFilter = filters.ActivityFilter
            .Cast<Activity>()
            .Clear(x => x.Id);

        var projectFilter = filters.ProjectFilter
            .Cast<Project>()
            .Clear(x => x.Id);

        var orderFilter = filters.OrderFilter
            .Cast<Order>()
            .Clear(x => x.Id);

        var filter = filters.TimeSheetFilter
            .Cast<TimeSheet>()
            .Replace(x => x.CustomerId, filters.CustomerFilter.GetPropertyFilterSyntax(p => p.Id))
            .ReplaceNested(x => x.Customer, customerFilter)
            .Replace(x => x.ActivityId, filters.ActivityFilter.GetPropertyFilterSyntax(a => a.Id))
            .ReplaceNested(x => x.Activity, activityFilter)
            .Replace(x => x.ProjectId, filters.ProjectFilter.GetPropertyFilterSyntax(p => p.Id))
            .ReplaceNested(x => x.Project, projectFilter)
            .Replace(x => x.OrderId, filters.OrderFilter.GetPropertyFilterSyntax(o => o.Id))
            .ReplaceNested(x => x.Order, orderFilter)
            .RestrictToCustomers(x => x.CustomerId, _authorizationService.RestrictToCustomerIds);

        filter = await SetUserFilter(filters, filter, x => x.UserId);

        return filter;
    }

    /// <inheritdoc />
    public async Task<EntityFilter<Holiday>> CreateHolidayFilter(TimeSheetFilterSet filters)
    {
        var filter = filters.HolidayFilter
            .Cast<Holiday>();

        filter = await SetUserFilter(filters, filter, x => x.UserId, AuthorizationService.DefaultUserId);

        return filter;
    }

    /// <inheritdoc />
    public async Task<EntityFilter<UserDto>> CreateUserFilter(TimeSheetFilterSet filters)
    {
        var filter = filters?.UserFilter ?? new EntityFilter<UserDto>();

        filter = await SetUserFilter(filters, filter, x => x.Id);

        return filter;
    }

    /// <inheritdoc />
    public async Task<ChartFilter> CreateChartFilter(TimeSheetFilterSet filters)
    {
        var workedTimesFilter = await CreateTimeSheetFilter(filters);
        var plannedTimesFilter = await CreateOrderFilter(filters);

        var selectedPeriodForFilter = await filters.GetSelectedPeriod();

        if (selectedPeriodForFilter.Start != DateOffset.MinDate)
            plannedTimesFilter = plannedTimesFilter
                .Replace(x => x.DueDate, FilterOperator.GreaterThanOrEqual, selectedPeriodForFilter.Start);

        if (selectedPeriodForFilter.End != DateOffset.MaxDate)
            plannedTimesFilter = plannedTimesFilter
                .Replace(x => x.StartDate, FilterOperator.LessThan, selectedPeriodForFilter.End);

        var selectedPeriod = await filters.GetSelectedPeriod(true);

        return new ChartFilter(filters, workedTimesFilter, plannedTimesFilter, selectedPeriod);
    }

    private async Task<EntityFilter<TFilter>> SetUserFilter<TFilter>(TimeSheetFilterSet filters, EntityFilter<TFilter> filter, Expression<Func<TFilter, Guid>> userIdSelector, params Guid[] additionalAllowedUserIds)
    {
        if (_authorizationService.AuthorizationDisabled)
            return filter;

        if (filters.UserFilter.IsEmpty() && _authorizationService.CanViewForeignData)
            return filter;

        var filteredUsers = await _userService.GetFiltered(filters);
        var filteredUserIds = filteredUsers.Select(x => x.Id).Concat(additionalAllowedUserIds).ToArray();
        filter.Replace(userIdSelector, filteredUserIds);

        return filter;
    }
}
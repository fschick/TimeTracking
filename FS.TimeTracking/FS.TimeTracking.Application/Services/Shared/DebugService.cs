#if DEBUG
using FS.TimeTracking.Core.Interfaces.Application.Services.Shared;
using FS.TimeTracking.Core.Interfaces.Repository.Services.Database;
using Microsoft.AspNetCore.Http;
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Security.Claims;
using System.Threading;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services.Shared
{
    /// <inheritdoc />
    [ExcludeFromCodeCoverage]
    public class DebugService : IDebugService
    {
        private readonly IDbRepository _dbRepository;
        private readonly IHttpContextAccessor _httpContextAccessor;

        /// <summary>
        /// Initializes a new instance of the <see cref="DebugService"/> class.
        /// </summary>
        /// <param name="dbRepository">The repository.</param>
        /// <param name="httpContextAccessor">The HTTP context accessor.</param>
        /// <autogeneratedoc />
        public DebugService(IDbRepository dbRepository, IHttpContextAccessor httpContextAccessor)
        {
            _dbRepository = dbRepository;
            _httpContextAccessor = httpContextAccessor;
        }

        /// <inheritdoc />
        public async Task<object> TestMethod(CancellationToken cancellationToken = default)
        {
            await Task.Delay(0, cancellationToken);

            var user = _httpContextAccessor.HttpContext?.User;
            if (user == null)
                return null;

            var identity = (ClaimsIdentity)user.Identity;
            if (identity == null)
                throw new InvalidOperationException("Identity not found.");

            var userInfo = new
            {
                identity.Actor,
                identity.AuthenticationType,
                identity.IsAuthenticated,
                UserName = identity.Name,
                Name = user.Claims.FirstOrDefault(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value,
                Surname = user.Claims.FirstOrDefault(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname")?.Value,
                Emailaddress = user.Claims.FirstOrDefault(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value,
                EmailVerified = user.Claims.FirstOrDefault(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/email_verified")?.Value,
                Role = user.Claims.FirstOrDefault(x => x.Type == identity.RoleClaimType)?.Value,
                Aud = user.Claims.FirstOrDefault(x => x.Type == "aud")?.Value,
                Typ = user.Claims.FirstOrDefault(x => x.Type == "typ")?.Value,
                identity.NameClaimType,
                identity.RoleClaimType,
                user.Claims,
            };

            return userInfo;
        }
    }
}
#endif
#if DEBUG
using FS.TimeTracking.Core.Extensions;
using FS.TimeTracking.Core.Interfaces.Application.Services.Shared;
using FS.TimeTracking.Core.Interfaces.Repository.Services;
using FS.TimeTracking.Core.Models.Application.MasterData;
using FS.TimeTracking.Core.Models.Application.TimeTracking;
using System.Threading;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services.Shared
{
    /// <inheritdoc />
    public class DebugService : IDebugService
    {
        private readonly IRepository _repository;

        /// <summary>
        /// Initializes a new instance of the <see cref="DebugService"/> class.
        /// </summary>
        /// <param name="repository">The repository.</param>
        /// <autogeneratedoc />
        public DebugService(IRepository repository)
            => _repository = repository;

        /// <inheritdoc />
        public async Task<object> TestMethod(CancellationToken cancellationToken = default)
        {
            var d1 = await _repository.Get((Order x) => x.StartDateLocal, cancellationToken: cancellationToken);
            var d2 = await _repository.Get((Order x) => x.StartDateLocal.ToUtc(120), cancellationToken: cancellationToken);
            var d3 = await _repository.Get((Order x) => x.StartDateLocal.ToUtc(x.StartDateOffset), cancellationToken: cancellationToken);
            var d4 = await _repository.Get((TimeSheet x) => x.EndDateLocal.ToUtc(x.EndDateOffset.Value), cancellationToken: cancellationToken);
            return Task.FromResult<object>(1);
        }
    }
}
#endif
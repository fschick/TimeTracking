using AutoMapper;
using FS.TimeTracking.Core.Interfaces.Application.Services.Shared;
using FS.TimeTracking.Core.Interfaces.Models;
using FS.TimeTracking.Core.Interfaces.Repository.Services.Database;
using FS.TimeTracking.Core.Models.Filter;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services.Shared;

/// <inheritdoc />
public abstract class CrudModelService<TModel, TDto, TGridDto> : ICrudModelService<Guid, TDto, TGridDto>
    where TModel : class, IIdEntityModel, new()
{
    /// <summary>
    /// The repository.
    /// </summary>
    protected readonly IDbRepository DbRepository;

    /// <summary>
    /// The mapper to convert models to DTOs and vice versa.
    /// </summary>
    protected readonly IMapper Mapper;

    /// <summary>
    /// Initializes a new instance of the <see cref="CrudModelService{TModel, TDto, TQuery}"/> class.
    /// </summary>
    /// <param name="dbRepository">The repository.</param>
    /// <param name="mapper">The mapper to convert models to DTOs and vice versa.</param>
    /// <autogeneratedoc />
    protected CrudModelService(IDbRepository dbRepository, IMapper mapper)
    {
        DbRepository = dbRepository;
        Mapper = mapper;
    }

    /// <inheritdoc />
    public async Task<TDto> Get(Guid id, CancellationToken cancellationToken = default)
        => await DbRepository
            .FirstOrDefault<TModel, TDto>(
                where: model => model.Id == id,
                cancellationToken: cancellationToken
            );

    /// <inheritdoc />
    public abstract Task<List<TGridDto>> GetGridFiltered(TimeSheetFilterSet filters, CancellationToken cancellationToken = default);

    /// <inheritdoc />
    public async Task<TGridDto> GetGridItem(Guid id, CancellationToken cancellationToken = default)
        => await DbRepository
            .FirstOrDefault<TModel, TGridDto>(
                where: model => model.Id == id,
                cancellationToken: cancellationToken
            );

    /// <inheritdoc />
    public async Task<TDto> Create(TDto dto)
    {
        var model = Mapper.Map<TModel>(dto);
        await CheckConformity(model);
        var result = await DbRepository.Add(model);
        await DbRepository.SaveChanges();
        return Mapper.Map<TDto>(result);
    }

    /// <inheritdoc />
    public async Task<TDto> Update(TDto dto)
    {
        var model = Mapper.Map<TModel>(dto);
        await CheckConformity(model);
        var result = DbRepository.Update(model);
        await DbRepository.SaveChanges();
        return Mapper.Map<TDto>(result);
    }

    /// <summary>
    /// Checks conformity of an entity on a deeper level than model validation can do before it's added or modified to database.
    /// </summary>
    /// <param name="model">The model to check.</param>
    protected virtual Task CheckConformity(TModel model)
        => Task.CompletedTask;

    /// <inheritdoc />
    public async Task<long> Delete(Guid id)
    {
        await DbRepository.Remove<TModel>(x => x.Id == id);
        return await DbRepository.SaveChanges();
    }
}
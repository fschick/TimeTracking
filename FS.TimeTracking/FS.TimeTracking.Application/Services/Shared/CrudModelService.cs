using AutoMapper;
using FS.TimeTracking.Abstractions.Interfaces.DTOs;
using FS.TimeTracking.Core.Exceptions;
using FS.TimeTracking.Core.Interfaces.Application.Services.Administration;
using FS.TimeTracking.Core.Interfaces.Application.Services.Shared;
using FS.TimeTracking.Core.Interfaces.Models;
using FS.TimeTracking.Core.Interfaces.Repository.Services.Database;
using FS.TimeTracking.Core.Models.Application.Core;
using FS.TimeTracking.Core.Models.Filter;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services.Shared;

/// <inheritdoc />
public abstract class CrudModelService<TModel, TDto, TGridDto> : ICrudModelService<Guid, TDto, TGridDto>
    where TModel : class, IIdEntityModel, new()
    where TDto : class, IManageableDto
    where TGridDto : class, IManageableDto
{
    /// <summary>
    /// The repository.
    /// </summary>
    protected readonly IDbRepository DbRepository;

    /// <summary>
    /// The mapper to convert models to DTOs and vice versa.
    /// </summary>
    protected readonly IMapper Mapper;

    /// <inheritdoc cref="IFilterFactory"/>
    protected readonly IFilterFactory FilterFactory;

    /// <inheritdoc cref="IAuthorizationService"/>
    protected readonly IAuthorizationService AuthorizationService;

    /// <inheritdoc cref="IUserService"/>
    protected readonly IUserService UserService;

    /// <summary>
    /// Initializes a new instance of the <see cref="CrudModelService{TModel, TDto, TGridDto}"/> class.
    /// </summary>
    /// <param name="authorizationService">The authorization service.</param>
    /// <param name="dbRepository">The repository.</param>
    /// <param name="mapper">The mapper to convert models to DTOs and vice versa.</param>
    /// <param name="filterFactory">The filter factory.</param>
    /// <param name="userService">The user service.</param>
    /// <autogeneratedoc />
    protected CrudModelService(IAuthorizationService authorizationService, IDbRepository dbRepository, IMapper mapper, IFilterFactory filterFactory, IUserService userService)
    {
        AuthorizationService = authorizationService;
        DbRepository = dbRepository;
        Mapper = mapper;
        FilterFactory = filterFactory;
        UserService = userService;
    }

    /// <inheritdoc />
    public async Task<TDto> Get(Guid id, CancellationToken cancellationToken = default)
    {
        var dto = await DbRepository
            .FirstOrDefault<TModel, TDto>(
                where: model => model.Id == id,
                cancellationToken: cancellationToken
            );

        if (dto == null)
            return null;

        if (dto is IUserLinkedDto userLinkedDto && !AuthorizationService.CanViewUser(userLinkedDto.UserId))
            throw new ForbiddenException(ApplicationErrorCode.ForbiddenForeignUserData);

        if (dto is ICustomerLinkedDto customerLinkedDto && !AuthorizationService.CanViewCustomer(customerLinkedDto.CustomerId))
            throw new ForbiddenException(ApplicationErrorCode.ForbiddenRestrictedCustomer);

        await AuthorizationService.SetAuthorizationRelatedProperties(dto, cancellationToken);

        return dto;
    }

    /// <inheritdoc />
    public abstract Task<List<TGridDto>> GetGridFiltered(TimeSheetFilterSet filters, CancellationToken cancellationToken = default);

    /// <inheritdoc />
    public async Task<TGridDto> GetGridItem(Guid id, CancellationToken cancellationToken = default)
    {
        var dto = await DbRepository
            .FirstOrDefault<TModel, TGridDto>(
                where: model => model.Id == id,
                cancellationToken: cancellationToken
            );

        if (dto == null)
            return null;

        if (dto is IUserLinkedGridDto userLinkedGridDto)
        {
            if (!AuthorizationService.CanViewUser(userLinkedGridDto.UserId))
                throw new ForbiddenException(ApplicationErrorCode.ForbiddenForeignUserData);
            await UserService.SetUserRelatedProperties(userLinkedGridDto, cancellationToken);
        }

        if (dto is ICustomerLinkedDto customerLinkedDto && !AuthorizationService.CanViewCustomer(customerLinkedDto.CustomerId))
            throw new ForbiddenException(ApplicationErrorCode.ForbiddenRestrictedCustomer);

        await AuthorizationService.SetAuthorizationRelatedProperties(dto, cancellationToken);

        return dto;
    }

    /// <inheritdoc />
    public async Task<TDto> Create(TDto dto)
    {
        if (dto is IUserLinkedDto userLinkedDto && !AuthorizationService.CanManageUser(userLinkedDto.UserId))
            throw new ForbiddenException(ApplicationErrorCode.ForbiddenForeignUserData);

        if (dto is ICustomerLinkedDto customerLinkedDto && !AuthorizationService.CanViewCustomer(customerLinkedDto.CustomerId))
            throw new ForbiddenException(ApplicationErrorCode.ForbiddenRestrictedCustomer);

        var model = Mapper.Map<TModel>(dto);
        await CheckConformity(model);
        var result = await DbRepository.Add(model);
        await DbRepository.SaveChanges();
        var resultDto = Mapper.Map<TDto>(result);
        await AuthorizationService.SetAuthorizationRelatedProperties(resultDto);
        return resultDto;
    }

    /// <inheritdoc />
    public async Task<TDto> Update(TDto dto)
    {
        var model = Mapper.Map<TModel>(dto);

        if (model is IUserLinkedModel userLinkedModel)
        {
            var newUserId = userLinkedModel.UserId;
            if (!AuthorizationService.CanManageUser(newUserId))
                throw new ForbiddenException(ApplicationErrorCode.ForbiddenForeignUserData);

            var oldUserId = await DbRepository.FirstOrDefault((TModel x) => ((IUserLinkedModel)x).UserId, x => x.Id == model.Id);
            if (!AuthorizationService.CanManageUser(oldUserId))
                throw new ForbiddenException(ApplicationErrorCode.ForbiddenForeignUserData);
        }

        if (model is ICustomerLinkedModel customerLinkedModel)
        {
            var newCustomerId = customerLinkedModel.CustomerId;
            if (!AuthorizationService.CanViewCustomer(newCustomerId))
                throw new ForbiddenException(ApplicationErrorCode.ForbiddenRestrictedCustomer);

            var oldCustomerId = await DbRepository.FirstOrDefault((TModel x) => ((ICustomerLinkedModel)x).CustomerId, x => x.Id == model.Id);
            if (!AuthorizationService.CanViewCustomer(oldCustomerId))
                throw new ForbiddenException(ApplicationErrorCode.ForbiddenRestrictedCustomer);
        }

        await CheckConformity(model);
        var result = DbRepository.Update(model);
        await DbRepository.SaveChanges();
        var resultDto = Mapper.Map<TDto>(result);
        await AuthorizationService.SetAuthorizationRelatedProperties(resultDto);
        return resultDto;
    }

    /// <inheritdoc />
    public async Task<long> Delete(Guid id)
    {
        var model = new TModel { Id = id };

        if (model is IUserLinkedModel)
        {
            var userId = await DbRepository.FirstOrDefault((TModel x) => ((IUserLinkedModel)x).UserId, x => x.Id == id);
            if (!AuthorizationService.CanManageUser(userId))
                throw new ForbiddenException(ApplicationErrorCode.ForbiddenForeignUserData);
        }

        if (model is ICustomerLinkedModel)
        {
            var customerId = await DbRepository.FirstOrDefault((TModel x) => ((ICustomerLinkedModel)x).CustomerId, x => x.Id == id);
            if (!AuthorizationService.CanViewCustomer(customerId))
                throw new ForbiddenException(ApplicationErrorCode.ForbiddenRestrictedCustomer);
        }

        DbRepository.Remove(model);
        return await DbRepository.SaveChanges();
    }

    /// <summary>
    /// Checks conformity of an entity on a deeper level than model validation can do before it's added or modified to database.
    /// </summary>
    /// <param name="model">The model to check.</param>
    protected virtual Task CheckConformity(TModel model)
        => Task.CompletedTask;
}
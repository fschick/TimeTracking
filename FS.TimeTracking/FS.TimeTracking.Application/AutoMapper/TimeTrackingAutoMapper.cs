using AutoMapper;
using FS.TimeTracking.Shared.DTOs.TimeTracking;
using FS.TimeTracking.Shared.Models.MasterData;
using FS.TimeTracking.Shared.Models.TimeTracking;
using System.Collections.Generic;
using FS.TimeTracking.Shared.DTOs.MasterData;

namespace FS.TimeTracking.Application.AutoMapper;

/// <summary>
/// Configuration profile for auto mapper.
/// </summary>
/// <seealso cref="Profile" />
public class TimeTrackingAutoMapper : Profile
{
    /// <summary>
    /// Initializes a new instance of the <see cref="TimeTrackingAutoMapper"/> class.
    /// </summary>
    /// <autogeneratedoc />
    public TimeTrackingAutoMapper()
    {
        ClearPrefixes();

        CreateMap<string, string>()
            .ConvertUsing(x => string.IsNullOrEmpty(x) ? null : x);

        CreateMap<List<Setting>, SettingDto>()
            .ConvertUsing<SettingsToDtoMapper>();

        CreateMap<SettingDto, List<Setting>>()
            .ConvertUsing<SettingsFromDtoMapper>();

        CreateMap<Holiday, HolidayDto>()
            .ReverseMap()
            .ForMember(x => x.StartDateOffset, x => x.Ignore())
            .ForMember(x => x.EndDateOffset, x => x.Ignore());

        CreateMap<Customer, CustomerDto>()
            .ReverseMap();

        CreateMap<Project, ProjectDto>()
            .ReverseMap();

        CreateMap<Activity, ActivityDto>()
            .ReverseMap();

        CreateMap<Order, OrderDto>()
            .ReverseMap()
            .ForMember(x => x.StartDateOffset, x => x.Ignore())
            .ForMember(x => x.DueDateOffset, x => x.Ignore());

        CreateMap<TimeSheet, TimeSheetDto>()
            .ReverseMap()
            .ForMember(x => x.StartDateOffset, x => x.Ignore())
            .ForMember(x => x.EndDateOffset, x => x.Ignore());

        CreateMap<Holiday, HolidayListDto>();

        CreateMap<Customer, CustomerListDto>();

        CreateMap<Project, ProjectListDto>();

        CreateMap<Activity, ActivityListDto>()
            .ForMember(x => x.CustomerTitle, x => x.MapFrom(activity => activity.Project.Customer.Title));

        CreateMap<Order, OrderListDto>();

        CreateMap<TimeSheet, TimeSheetListDto>()
            .ForMember(x => x.CustomerTitle, x => x.MapFrom(timeSheet => timeSheet.Project.Customer.Title))
            .ForMember(x => x.Duration, x => x.MapFrom(timeSheet => timeSheet.EndDate - timeSheet.StartDate));
    }
}

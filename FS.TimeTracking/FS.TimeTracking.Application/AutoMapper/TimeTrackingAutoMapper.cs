using AutoMapper;
using FS.Keycloak.RestApiClient.Model;
using FS.TimeTracking.Abstractions.Constants;
using FS.TimeTracking.Abstractions.DTOs.Administration;
using FS.TimeTracking.Abstractions.DTOs.Configuration;
using FS.TimeTracking.Abstractions.DTOs.MasterData;
using FS.TimeTracking.Abstractions.DTOs.TimeTracking;
using FS.TimeTracking.Application.Extensions;
using FS.TimeTracking.Core.Models.Application.MasterData;
using FS.TimeTracking.Core.Models.Application.TimeTracking;
using FS.TimeTracking.Core.Models.Configuration;
using FS.TimeTracking.Report.Client.Model;
using System;
using System.Collections.Generic;

namespace FS.TimeTracking.Application.AutoMapper;

/// <summary>
/// Configuration profile for auto mapper.
/// </summary>
/// <seealso cref="Profile" />
public class TimeTrackingAutoMapper : Profile
{
    /// <summary>
    /// Initializes a new instance of the <see cref="TimeTrackingAutoMapper"/> class.
    /// </summary>
    /// <autogeneratedoc />
    public TimeTrackingAutoMapper()
    {
        ClearPrefixes();
        DisableConstructorMapping();

        CreateMap<string, string>()
            .ConvertUsing(x => string.IsNullOrEmpty(x) ? null : x);

        CreateMap<List<Setting>, SettingDto>()
            .ConvertUsing<SettingsToDtoConverter>();

        CreateMap<SettingDto, List<Setting>>()
            .ConvertUsing<SettingsFromDtoConverter>();

        CreateMap<List<string>, List<PermissionDto>>()
            .ConvertUsing<RolesToPermissionsConverter>();

        CreateMap<List<PermissionDto>, List<string>>()
            .ConvertUsing<RolesFromPermissionsConverter>();

        CreateMap<Holiday, HolidayDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore())
            .ReverseMap()
            .ForMember(x => x.StartDate, x => x.ConvertUsing<TruncateDateTimeToDayConverter, DateTimeOffset>())
            .ForMember(x => x.EndDate, x => x.ConvertUsing<TruncateDateTimeToDayConverter, DateTimeOffset>())
            .ForMember(x => x.StartDateOffset, x => x.Ignore())
            .ForMember(x => x.EndDateOffset, x => x.Ignore());

        CreateMap<Holiday, HolidayGridDto>()
            .ForMember(x => x.Username, x => x.Ignore())
            .ForMember(x => x.IsReadonly, x => x.Ignore());

        CreateMap<Customer, CustomerDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore())
            .ReverseMap();

        CreateMap<Customer, CustomerGridDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore());

        CreateMap<Project, ProjectDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore())
            .ReverseMap();

        CreateMap<Project, ProjectGridDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore());

        CreateMap<Activity, ActivityDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore())
            .ReverseMap()
            .ForMember(x => x.Customer, x => x.Ignore())
            .ForMember(x => x.Project, x => x.Ignore());

        CreateMap<Activity, ActivityGridDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore());

        CreateMap<Order, OrderDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore())
            .ReverseMap()
            .ForMember(x => x.StartDate, x => x.ConvertUsing<TruncateDateTimeToDayConverter, DateTimeOffset>())
            .ForMember(x => x.DueDate, x => x.ConvertUsing<TruncateDateTimeToDayConverter, DateTimeOffset>())
            .ForMember(x => x.StartDateOffset, x => x.Ignore())
            .ForMember(x => x.DueDateOffset, x => x.Ignore());

        CreateMap<Order, OrderGridDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore());

        CreateMap<UserDto, UserGridDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore())
            .ReverseMap()
            .ForMember(x => x.Password, x => x.Ignore());

        CreateMap<UserRepresentation, UserDto>()
            .ForMember(x => x.Password, x => x.Ignore())
            .ForMember(x => x.Permissions, x => x.Ignore())
            .ForMember(x => x.RestrictToCustomerIds, x => x.MapFrom(user => user.GetRestrictedCustomerIds()))
            .ForMember(x => x.IsReadonly, x => x.Ignore())
            .ReverseMap()
            .ForMember(x => x.Attributes, x => x.MapFrom((userDto, user) => user.SetRestrictedCustomerIds(userDto)));

        CreateMap<UserRepresentation, UserGridDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore());

        CreateMap<TimeSheet, TimeSheetDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore())
            .ReverseMap()
            .ForMember(x => x.StartDate, x => x.ConvertUsing<TruncateDateTimeToMinuteConverter, DateTimeOffset>())
            .ForMember(x => x.EndDate, x => x.ConvertUsing<TruncateNullableDateTimeToMinuteConverter, DateTimeOffset?>())
            .ForMember(x => x.StartDateOffset, x => x.Ignore())
            .ForMember(x => x.EndDateOffset, x => x.Ignore());

        CreateMap<TimeSheet, TimeSheetGridDto>()
            .ForMember(x => x.IsReadonly, x => x.Ignore())
            .ForMember(x => x.CustomerTitle, x => x.MapFrom(timeSheet => timeSheet.Customer.Title))
            .ForMember(x => x.ProjectTitle, x => x.MapFrom(timeSheet => timeSheet.Project.Title))
            .ForMember(x => x.Duration, x => x.MapFrom(timeSheet => timeSheet.EndDate - timeSheet.StartDate))
            .ForMember(x => x.Username, x => x.Ignore());

        CreateMap<TimeSheet, ActivityReportTimeSheetDto>()
            .ForMember(x => x.CustomerTitle, x => x.MapFrom(timeSheet => timeSheet.Customer.Title))
            .ForMember(x => x.ProjectTitle, x => x.MapFrom(timeSheet => timeSheet.Project.Title))
            .ForMember(x => x.CustomerCompanyName, x => x.MapFrom(timeSheet => timeSheet.Customer.CompanyName))
            .ForMember(x => x.CustomerDepartment, x => x.MapFrom(timeSheet => timeSheet.Customer.Department))
            .ForMember(x => x.CustomerContactName, x => x.MapFrom(timeSheet => timeSheet.Customer.ContactName))
            .ForMember(x => x.Duration, x => x.MapFrom(timeSheet => timeSheet.EndDate - timeSheet.StartDate))
            .ForMember(x => x.GroupBy, x => x.Ignore());

        CreateMap<FeatureConfiguration, FeatureConfigurationDto>();

        CreateMap<KeycloakConfiguration, KeycloakConfigurationDto>();

        CreateMap<TimeTrackingConfiguration, ClientConfigurationDto>()
            .ForMember(x => x.DefaultPermissions, x => x.MapFrom(_ => DefaultPermissions.NoPermissions));
    }
}

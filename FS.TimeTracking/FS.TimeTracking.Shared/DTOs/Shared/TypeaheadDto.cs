using System;
using FS.TimeTracking.Shared.Interfaces.Application.Services.Shared;

namespace FS.TimeTracking.Shared.DTOs.Shared;

/// <summary>
/// Non-generic factory for <see cref="TypeaheadDto{TValue}"/>.
/// </summary>
public class TypeaheadDto
{
    /// <summary>
    /// Initializes a new instance of the <see cref="TypeaheadDto{TValue}"/> class.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="id">The value to be selected.</param>
    /// <param name="value">The label to display.</param>
    /// <param name="hidden"><c>true</c>, if the value is hidden; otherwise false.</param>
    public static TypeaheadDto<TValue> Create<TValue>(Guid id, TValue value, bool hidden)
        => new TypeaheadDto<TValue>(id, value, hidden);
}

/// <summary>
/// Generic DTO returned by <see cref="ITypeaheadService"/>.
/// </summary>
/// <typeparam name="TValue">The type of the value.</typeparam>
public class TypeaheadDto<TValue>
{
    /// <summary>
    /// The ID of the entity.
    /// </summary>
    public Guid Id { get; set; }

    /// <summary>
    /// The label to display.
    /// </summary>
    public TValue Value { get; set; }

    /// <summary>
    /// Indicates whether the entity is marked as hidden.
    /// </summary>
    public bool Hidden { get; set; }

    /// <summary>
    /// Extended properties, e.g. related customer to an order.
    /// </summary>
    public object Extended { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="TypeaheadDto{TValue}"/> class.
    /// </summary>
    /// <autogeneratedoc />
    public TypeaheadDto() { }

    /// <summary>
    /// Initializes a new instance of the <see cref="TypeaheadDto{TValue}" /> class.
    /// </summary>
    /// <param name="id">The value to be selected.</param>
    /// <param name="value">The label to display.</param>
    /// <param name="hidden"><c>true</c>, if the value is hidden; otherwise false.</param>
    public TypeaheadDto(Guid id, TValue value, bool hidden)
        => (Id, Value, Hidden) = (id, value, hidden);
}
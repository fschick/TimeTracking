using System;
using System.Collections.Generic;
using System.Linq;

namespace FS.TimeTracking.Shared.Extensions
{
    /// <summary>
    /// Extensions methods for type <see cref="DateTime"></see>
    /// </summary>
    public static class DateTimeExtensions
    {
        /// <summary>
        /// Converts a <see cref="DateTime"/> to a <see cref="DateTimeOffset"/> using a given offset.
        /// </summary>
        /// <param name="dateTime">The date time.</param>
        /// <param name="offset">The offset to use.</param>
        public static DateTimeOffset ToOffset(this DateTime dateTime, TimeSpan? offset)
        {
            if (dateTime.Kind == DateTimeKind.Unspecified)
                throw new ArgumentException($"The kind must not be '{nameof(DateTimeKind.Unspecified)}'", nameof(dateTime));
            return new DateTimeOffset(dateTime.ToUniversalTime(), TimeSpan.Zero).ToOffset(offset ?? TimeSpan.Zero);
        }

        /// <summary>
        /// Converts a <see cref="DateTime"/> to a <see cref="DateTimeOffset"/> using a given offset.
        /// </summary>
        /// <param name="dateTime">The date time.</param>
        /// <param name="offset">The offset to use.</param>
        public static DateTimeOffset? ToOffset(this DateTime? dateTime, TimeSpan? offset)
            => dateTime?.ToOffset(offset);

        /// <summary>
        /// Gets the dates between two dates.
        /// </summary>
        /// <param name="from">Start date.</param>
        /// <param name="to">End date.</param>
        public static IEnumerable<DateTime> GetDays(this DateTime from, DateTime to)
            => Enumerable
                .Range(0, (int)Math.Abs(Math.Round((to - from).TotalDays, MidpointRounding.AwayFromZero)))
                .Select(x => from.AddDays(x));

        /// <summary>
        /// Gets a number of dates starting from a date.
        /// </summary>
        /// <param name="from">Start date.</param>
        /// <param name="days">The count of days to get dates for.</param>
        public static IEnumerable<DateTime> GetDays(this DateTime from, int days)
            => Enumerable
                .Range(0, days)
                .Select(x => from.AddDays(x));

        /// <summary>
        /// Gets all dates of a month.
        /// </summary>
        /// <param name="dateTime">The year and month to get the days for.</param>
        public static IEnumerable<DateTime> GetDaysOfMonth(this DateTime dateTime)
            => Enumerable
                .Range(1, DateTime.DaysInMonth(dateTime.Year, dateTime.Month))
                .Select(day => new DateTime(dateTime.Year, dateTime.Month, day));

        /// <summary>
        /// Gets all dates of a month till a given date.
        /// </summary>
        /// <param name="dateTime">The date till the days should be returned.</param>
        /// <autogeneratedoc />
        public static IEnumerable<DateTime> GetDaysOfMonthTillDay(this DateTime dateTime)
            => Enumerable
                .Range(1, dateTime.Day)
                .Select(day => new DateTime(dateTime.Year, dateTime.Month, day));
    }
}

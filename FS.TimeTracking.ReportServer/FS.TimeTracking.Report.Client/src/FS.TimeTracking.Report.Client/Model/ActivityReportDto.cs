/*
 * Time Tracking Report API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = FS.TimeTracking.Report.Client.Client.FileParameter;
using OpenAPIDateConverter = FS.TimeTracking.Report.Client.Client.OpenAPIDateConverter;

namespace FS.TimeTracking.Report.Client.Model
{
    /// <summary>
    /// Time sheet report data.
    /// </summary>
    [DataContract(Name = "ActivityReportDto")]
    public partial class ActivityReportDto : IEquatable<ActivityReportDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityReportDto" /> class.
        /// </summary>
        /// <param name="parameters">parameters.</param>
        /// <param name="provider">provider.</param>
        /// <param name="translations">Gets or sets the translations..</param>
        /// <param name="timeSheets">Gets or sets the time sheets..</param>
        public ActivityReportDto(ReportParameter parameters = default(ReportParameter), ProviderDto provider = default(ProviderDto), Dictionary<string, string> translations = default(Dictionary<string, string>), List<ActivityReportTimeSheetDto> timeSheets = default(List<ActivityReportTimeSheetDto>))
        {
            this.Parameters = parameters;
            this.Provider = provider;
            this.Translations = translations;
            this.TimeSheets = timeSheets;
        }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public ReportParameter Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        public ProviderDto Provider { get; set; }

        /// <summary>
        /// Gets or sets the translations.
        /// </summary>
        /// <value>Gets or sets the translations.</value>
        [DataMember(Name = "translations", EmitDefaultValue = true)]
        public Dictionary<string, string> Translations { get; set; }

        /// <summary>
        /// Gets or sets the time sheets.
        /// </summary>
        /// <value>Gets or sets the time sheets.</value>
        [DataMember(Name = "timeSheets", EmitDefaultValue = true)]
        public List<ActivityReportTimeSheetDto> TimeSheets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityReportDto {\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Translations: ").Append(Translations).Append("\n");
            sb.Append("  TimeSheets: ").Append(TimeSheets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityReportDto);
        }

        /// <summary>
        /// Returns true if ActivityReportDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityReportDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityReportDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Translations == input.Translations ||
                    this.Translations != null &&
                    input.Translations != null &&
                    this.Translations.SequenceEqual(input.Translations)
                ) && 
                (
                    this.TimeSheets == input.TimeSheets ||
                    this.TimeSheets != null &&
                    input.TimeSheets != null &&
                    this.TimeSheets.SequenceEqual(input.TimeSheets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.Translations != null)
                {
                    hashCode = (hashCode * 59) + this.Translations.GetHashCode();
                }
                if (this.TimeSheets != null)
                {
                    hashCode = (hashCode * 59) + this.TimeSheets.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

using AutoMapper;
using FS.TimeTracking.Shared.Interfaces.Application.Services;
using FS.TimeTracking.Shared.Interfaces.Models;
using FS.TimeTracking.Shared.Interfaces.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace FS.TimeTracking.Application.Services
{
    /// <inheritdoc />
    public abstract class CrudModelService<TModel, TDto, TListDto> : ICrudModelService<TDto, TListDto>
        where TModel : class, IEntityModel, new()
    {
        /// <summary>
        /// The repository
        /// </summary>
        /// <autogeneratedoc />
        protected readonly IRepository Repository;

        /// <summary>
        /// The mapper to convert models to DTOs and vice versa.
        /// </summary>
        /// <autogeneratedoc />
        protected readonly IMapper Mapper;

        /// <summary>
        /// Initializes a new instance of the <see cref="CrudModelService{TModel, TDto, TQuery}"/> class.
        /// </summary>
        /// <param name="repository">The repository.</param>
        /// <param name="mapper">The mapper to convert models to DTOs and vice versa.</param>
        /// <autogeneratedoc />
        protected CrudModelService(IRepository repository, IMapper mapper)
        {
            Repository = repository;
            Mapper = mapper;
        }

        /// <inheritdoc />
        public virtual async Task<List<TListDto>> List(Guid? id = null, CancellationToken cancellationToken = default)
            => await ListInternal(id, null, cancellationToken);

        /// <inheritdoc />
        public async Task<TDto> Get(Guid id, CancellationToken cancellationToken = default)
            => await Repository
                .FirstOrDefault(
                    select: (TModel model) => Mapper.Map<TDto>(model),
                    where: model => model.Id == id,
                    cancellationToken: cancellationToken
                );

        /// <inheritdoc />
        public async Task<TDto> Create(TDto dto)
        {
            var result = await Repository.Add(Mapper.Map<TModel>(dto));
            await Repository.SaveChanges();
            return Mapper.Map<TDto>(result);
        }

        /// <inheritdoc />
        public async Task<TDto> Update(TDto dto)
        {
            var result = Repository.Update(Mapper.Map<TModel>(dto));
            await Repository.SaveChanges();
            return Mapper.Map<TDto>(result);
        }

        /// <inheritdoc />
        public async Task<long> Delete(Guid id)
        {
            await Repository.Remove<TModel>(x => x.Id == id);
            return await Repository.SaveChanges();
        }

        /// <summary>
        /// Gets all items as flat list
        /// </summary>
        /// <param name="id">When specified, only the entity with the given GUID is returned.</param>
        /// <param name="orderBy">A function to order the result.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
        protected async Task<List<TListDto>> ListInternal(Guid? id = null, Func<IQueryable<TModel>, IOrderedQueryable<TModel>> orderBy = null, CancellationToken cancellationToken = default)
            => await Repository
                .Get<TModel, TListDto>(
                    where: id.HasValue ? x => x.Id == id : null,
                    orderBy: orderBy,
                    cancellationToken: cancellationToken
                );
    }
}